// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fiber/model/model"
)

func newGormGenTest(db *gorm.DB, opts ...gen.DOOption) gormGenTest {
	_gormGenTest := gormGenTest{}

	_gormGenTest.gormGenTestDo.UseDB(db, opts...)
	_gormGenTest.gormGenTestDo.UseModel(&model.GormGenTest{})

	tableName := _gormGenTest.gormGenTestDo.TableName()
	_gormGenTest.ALL = field.NewAsterisk(tableName)
	_gormGenTest.ID = field.NewInt32(tableName, "id")

	_gormGenTest.fillFieldMap()

	return _gormGenTest
}

type gormGenTest struct {
	gormGenTestDo

	ALL field.Asterisk
	ID  field.Int32

	fieldMap map[string]field.Expr
}

func (g gormGenTest) Table(newTableName string) *gormGenTest {
	g.gormGenTestDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gormGenTest) As(alias string) *gormGenTest {
	g.gormGenTestDo.DO = *(g.gormGenTestDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gormGenTest) updateTableName(table string) *gormGenTest {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")

	g.fillFieldMap()

	return g
}

func (g *gormGenTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gormGenTest) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 1)
	g.fieldMap["id"] = g.ID
}

func (g gormGenTest) clone(db *gorm.DB) gormGenTest {
	g.gormGenTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gormGenTest) replaceDB(db *gorm.DB) gormGenTest {
	g.gormGenTestDo.ReplaceDB(db)
	return g
}

type gormGenTestDo struct{ gen.DO }

type IGormGenTestDo interface {
	gen.SubQuery
	Debug() IGormGenTestDo
	WithContext(ctx context.Context) IGormGenTestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGormGenTestDo
	WriteDB() IGormGenTestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGormGenTestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGormGenTestDo
	Not(conds ...gen.Condition) IGormGenTestDo
	Or(conds ...gen.Condition) IGormGenTestDo
	Select(conds ...field.Expr) IGormGenTestDo
	Where(conds ...gen.Condition) IGormGenTestDo
	Order(conds ...field.Expr) IGormGenTestDo
	Distinct(cols ...field.Expr) IGormGenTestDo
	Omit(cols ...field.Expr) IGormGenTestDo
	Join(table schema.Tabler, on ...field.Expr) IGormGenTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGormGenTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGormGenTestDo
	Group(cols ...field.Expr) IGormGenTestDo
	Having(conds ...gen.Condition) IGormGenTestDo
	Limit(limit int) IGormGenTestDo
	Offset(offset int) IGormGenTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGormGenTestDo
	Unscoped() IGormGenTestDo
	Create(values ...*model.GormGenTest) error
	CreateInBatches(values []*model.GormGenTest, batchSize int) error
	Save(values ...*model.GormGenTest) error
	First() (*model.GormGenTest, error)
	Take() (*model.GormGenTest, error)
	Last() (*model.GormGenTest, error)
	Find() ([]*model.GormGenTest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GormGenTest, err error)
	FindInBatches(result *[]*model.GormGenTest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GormGenTest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGormGenTestDo
	Assign(attrs ...field.AssignExpr) IGormGenTestDo
	Joins(fields ...field.RelationField) IGormGenTestDo
	Preload(fields ...field.RelationField) IGormGenTestDo
	FirstOrInit() (*model.GormGenTest, error)
	FirstOrCreate() (*model.GormGenTest, error)
	FindByPage(offset int, limit int) (result []*model.GormGenTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGormGenTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gormGenTestDo) Debug() IGormGenTestDo {
	return g.withDO(g.DO.Debug())
}

func (g gormGenTestDo) WithContext(ctx context.Context) IGormGenTestDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gormGenTestDo) ReadDB() IGormGenTestDo {
	return g.Clauses(dbresolver.Read)
}

func (g gormGenTestDo) WriteDB() IGormGenTestDo {
	return g.Clauses(dbresolver.Write)
}

func (g gormGenTestDo) Session(config *gorm.Session) IGormGenTestDo {
	return g.withDO(g.DO.Session(config))
}

func (g gormGenTestDo) Clauses(conds ...clause.Expression) IGormGenTestDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gormGenTestDo) Returning(value interface{}, columns ...string) IGormGenTestDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gormGenTestDo) Not(conds ...gen.Condition) IGormGenTestDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gormGenTestDo) Or(conds ...gen.Condition) IGormGenTestDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gormGenTestDo) Select(conds ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gormGenTestDo) Where(conds ...gen.Condition) IGormGenTestDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gormGenTestDo) Order(conds ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gormGenTestDo) Distinct(cols ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gormGenTestDo) Omit(cols ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gormGenTestDo) Join(table schema.Tabler, on ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gormGenTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gormGenTestDo) RightJoin(table schema.Tabler, on ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gormGenTestDo) Group(cols ...field.Expr) IGormGenTestDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gormGenTestDo) Having(conds ...gen.Condition) IGormGenTestDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gormGenTestDo) Limit(limit int) IGormGenTestDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gormGenTestDo) Offset(offset int) IGormGenTestDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gormGenTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGormGenTestDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gormGenTestDo) Unscoped() IGormGenTestDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gormGenTestDo) Create(values ...*model.GormGenTest) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gormGenTestDo) CreateInBatches(values []*model.GormGenTest, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gormGenTestDo) Save(values ...*model.GormGenTest) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gormGenTestDo) First() (*model.GormGenTest, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GormGenTest), nil
	}
}

func (g gormGenTestDo) Take() (*model.GormGenTest, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GormGenTest), nil
	}
}

func (g gormGenTestDo) Last() (*model.GormGenTest, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GormGenTest), nil
	}
}

func (g gormGenTestDo) Find() ([]*model.GormGenTest, error) {
	result, err := g.DO.Find()
	return result.([]*model.GormGenTest), err
}

func (g gormGenTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GormGenTest, err error) {
	buf := make([]*model.GormGenTest, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gormGenTestDo) FindInBatches(result *[]*model.GormGenTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gormGenTestDo) Attrs(attrs ...field.AssignExpr) IGormGenTestDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gormGenTestDo) Assign(attrs ...field.AssignExpr) IGormGenTestDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gormGenTestDo) Joins(fields ...field.RelationField) IGormGenTestDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gormGenTestDo) Preload(fields ...field.RelationField) IGormGenTestDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gormGenTestDo) FirstOrInit() (*model.GormGenTest, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GormGenTest), nil
	}
}

func (g gormGenTestDo) FirstOrCreate() (*model.GormGenTest, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GormGenTest), nil
	}
}

func (g gormGenTestDo) FindByPage(offset int, limit int) (result []*model.GormGenTest, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gormGenTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gormGenTestDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gormGenTestDo) Delete(models ...*model.GormGenTest) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gormGenTestDo) withDO(do gen.Dao) *gormGenTestDo {
	g.DO = *do.(*gen.DO)
	return g
}
